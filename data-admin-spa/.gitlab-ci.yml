variables:
  #####base
  PRIVATE_DTR_URL: ${AWS_DTR_URL}
  #Team name for deploy, Please received by Ops.
  TEAM: "data"
  #Project type, Default is "s"
  PROJECT_TYPE: "w"
  #Porject name
  PROJECT_NAME: "admin-spa"
  #Rancher healthCheckPort & AWS containerPort. If you need sharing more containerPort, Please set it in consul.
  HC_PORT: "80"
  #
  ######[ops_deploy init] need
  #HealthCheck method
  HC_HTTP_REQUEST_METHOD: "GET"
  #HealthCheck path
  HC_HTTP_REQUEST_PATH: "/monitor/health"
  #Init time
  HC_PER_SEC: "30"

  S3_ENDPOINT: "http://192.168.3.57:18080"
  VERSION_FILE: "VERSION"
  VERSION: "1.0.0" # default tag if VERSION file not exists

stages:
  - init
  - build
  - qa
  - Dev
  - QA
  - QA_Test
  - Rel
  - Rel_Test
  - Prod
  - Prod_Test
  - Blue_Green

init:
  stage: init
  only:
    - /^dev.*$/
    - /^master.*$/
  tags:
    - aws
    - docker
  variables:
    GIT_STRATEGY: none
    ENV: ci
    REGION: cn-northwest-1
  script:
    - ops_deploy init
    
init-b:
  stage: init
  only:
    - /^dev.*$/
    - /^master.*$/
  tags:
    - aws
    - docker
  variables:
    GIT_STRATEGY: none
    ENV: ci
    REGION: cn-northwest-1
    PROJECT_NAME: "admin-spa-b"
  script:
    - ops_deploy init    

compile_local:
  stage: build
  image: ${PRIVATE_DTR_URL}/ops-basic/node:8.11
  variables:
    TYPE: local
  tags:
    - aws
    - docker
  when: manual    
  script:
    - echo "Start build image:" $(date)
    - source build_image.sh

compile_online:
  stage: build
  image: ${PRIVATE_DTR_URL}/ops-basic/node:8.11
  tags:
    - aws
    - docker
  when: manual    
  script:
    - echo "Start build image:" $(date)
    - source build_image.sh
    
compile_online_b:
  stage: build
  image: ${PRIVATE_DTR_URL}/ops-basic/node:8.11
  tags:
    - aws
    - docker
  variables:
    BLUE: "true"    
    PROJECT_NAME: "admin-spa-b"
  when: manual    
  script:
    - echo "Start build image:" $(date)
    - source build_image.sh    
    
deploy_dataqa:
  tags:
    - aws
    - docker
  stage: qa
  variables:
    GIT_STRATEGY: none
    ENV: qa
    REGION: cn-northwest-1
  when: manual    
  script:
    - ops_deploy deploy    
    
deploy_dataprod:
  tags:
    - aws
    - docker
  stage: Prod
  variables:
    GIT_STRATEGY: none
    ENV: dataprod
    REGION: us-east-1
  when: manual    
  script:
    - ops_deploy deploy
    
deploy_dataprod_b:
  tags:
    - aws
    - docker
  stage: Prod
  variables:
    GIT_STRATEGY: none
    ENV: dataprod
    REGION: us-east-1
    PROJECT_NAME: "admin-spa-b"
  when: manual    
  script:
    - ops_deploy deploy  
    
deploy_to_local:
  stage: Dev
  only:
    - dev
    - new-styles-dev
  image: 955466075186.dkr.ecr.cn-northwest-1.amazonaws.com.cn/ops-basic/pipeline-maven:20200325
  tags:
    - aws
    - docker
  script:
    - npm install
    - npm run dev-build
    - aws s3 rm --recursive --endpoint=http://192.168.3.57:18081  s3://dpp.admin.patsnap.com/
    # enable gzip
    - aws s3 cp --recursive --endpoint=http://192.168.3.57:18081 dist s3://dpp.admin.patsnap.com/
  after_script:
    - echo "Upload finished"
    
use_a_serivce:
  tags:
    - aws
    - docker
  stage: Blue_Green
  variables:
    GIT_STRATEGY: none
    ENV: dataprod
    REGION: us-east-1
    DOMAIN: dpp.admin.patsnap.com
  when: manual    
  script:
    - ops_deploy ingress     
    
use_b_serivce:
  tags:
    - aws
    - docker
  stage: Blue_Green
  variables:
    GIT_STRATEGY: none
    ENV: dataprod
    REGION: us-east-1
    DOMAIN: dpp.admin.patsnap.com
    SERVICE_NAME: ${PROJECT_TYPE}-${TEAM}-admin-spa-b
  when: manual    
  script:
    - ops_deploy ingress      
