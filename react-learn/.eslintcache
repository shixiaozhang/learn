[{"D:\\learn\\learn\\react-learn\\src\\App.js":"1","D:\\learn\\learn\\react-learn\\src\\reportWebVitals.js":"2","D:\\learn\\learn\\react-learn\\src\\login.js":"3","D:\\learn\\learn\\react-learn\\src\\index.js":"4","D:\\learn\\learn\\react-learn\\src\\Login.js":"5","D:\\learn\\learn\\react-learn\\src\\Routers.js":"6","D:\\learn\\learn\\react-learn\\src\\routers\\A.js":"7","D:\\learn\\learn\\react-learn\\src\\routers\\C.js":"8","D:\\learn\\learn\\react-learn\\src\\routers\\B.js":"9","D:\\learn\\learn\\react-learn\\src\\context.js":"10","D:\\learn\\learn\\react-learn\\src\\refs.js":"11","D:\\learn\\learn\\react-learn\\src\\render.js":"12","D:\\learn\\learn\\react-learn\\src\\reactApi.js":"13","D:\\learn\\learn\\react-learn\\src\\Hook.js":"14","D:\\learn\\learn\\react-learn\\src\\Hook2.js":"15"},{"size":8715,"mtime":1608617686724,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1607926586128,"results":"18","hashOfConfig":"17"},{"size":73,"mtime":1608112591495,"results":"19","hashOfConfig":"17"},{"size":836,"mtime":1609144296706,"results":"20","hashOfConfig":"17"},{"size":118,"mtime":1608608687835,"results":"21","hashOfConfig":"17"},{"size":2312,"mtime":1608607456432,"results":"22","hashOfConfig":"17"},{"size":81,"mtime":1608177125583,"results":"23","hashOfConfig":"17"},{"size":81,"mtime":1608177149257,"results":"24","hashOfConfig":"17"},{"size":81,"mtime":1608177160677,"results":"25","hashOfConfig":"17"},{"size":3229,"mtime":1608622901817,"results":"26","hashOfConfig":"17"},{"size":402,"mtime":1608627294339,"results":"27","hashOfConfig":"17"},{"size":2067,"mtime":1608711846447,"results":"28","hashOfConfig":"17"},{"size":3293,"mtime":1608794756517,"results":"29","hashOfConfig":"17"},{"size":6871,"mtime":1609143049882,"results":"30","hashOfConfig":"17"},{"size":3478,"mtime":1609149811063,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ag4uxw",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"D:\\learn\\learn\\react-learn\\src\\App.js",["64","65","66"],"D:\\learn\\learn\\react-learn\\src\\reportWebVitals.js",[],"D:\\learn\\learn\\react-learn\\src\\login.js",[],"D:\\learn\\learn\\react-learn\\src\\index.js",[],"D:\\learn\\learn\\react-learn\\src\\Login.js",[],"D:\\learn\\learn\\react-learn\\src\\Routers.js",["67","68","69","70","71"],"D:\\learn\\learn\\react-learn\\src\\routers\\A.js",[],"D:\\learn\\learn\\react-learn\\src\\routers\\C.js",[],"D:\\learn\\learn\\react-learn\\src\\routers\\B.js",[],"D:\\learn\\learn\\react-learn\\src\\context.js",[],"D:\\learn\\learn\\react-learn\\src\\refs.js",[],"D:\\learn\\learn\\react-learn\\src\\render.js",[],"D:\\learn\\learn\\react-learn\\src\\reactApi.js",["72"],"/*\r\n *@浅层比较的组件；PureComponent 和 React.memo\r\n * @Author: \r\n * @Date: 2020-12-24 10:33:45\r\n * @LastEditTime: 2020-12-24 15:25:54\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\learn\\react-learn\\src\\reactApi.js\r\n */\r\nimport React from 'react'\r\n\r\nclass Api extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            names: {\r\n                id: 0\r\n            }\r\n        }\r\n        this.ref = React.createRef()\r\n    }\r\n    changeId = () => {\r\n        let names = this.state.names\r\n        let id = names.id + 1\r\n        names = Object.assign(names, { id: id })\r\n        console.log(names);\r\n        this.setState({\r\n            names: names\r\n        })\r\n        console.log(this.state.names.id);\r\n\r\n    }\r\n    upDate = () => {\r\n        console.log(this.ref);\r\n        // this.ref.forceUpdate((props) => {\r\n        //     console.log(props);\r\n\r\n        // })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <button onClick={this.changeId}>+1</button><br />\r\n                <button onClick={this.upDate}>强制刷新</button>\r\n                <Apimemo ref={this.ref} name={this.state.names}></Apimemo>\r\n                <ApiPure ></ApiPure>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nclass ApiPure extends React.PureComponent {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            info: {\r\n                name: 'qqq',\r\n                other: {\r\n                    child: 0\r\n                }\r\n            }\r\n        }\r\n    }\r\n    upDate = () => {\r\n        this.forceUpdate((props) => {\r\n            console.log(props);\r\n\r\n        })\r\n    }\r\n    clickBut = () => {\r\n        let info = this.state.info\r\n        let child = info.other.child + 1;\r\n        info = Object.assign(info, { other: { child: child } })\r\n        this.setState({\r\n            info: info\r\n        })\r\n        console.log(this.state.info);\r\n    }\r\n    render() {\r\n        // child在变化但是，因为表层数据没改变，所以dom不刷新\r\n        return (\r\n            <>\r\n                <h1>我是pure组件</h1>\r\n                <h1>info:name:{this.state.info.name}</h1>\r\n                <h1>other:{this.state.info.other.child}</h1>\r\n                <button onClick={this.clickBut}>+1</button>\r\n                <br />\r\n                <button onClick={this.upDate}>强制刷新</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Mymemo(props) {\r\n    console.log(props);\r\n    // id在变化但是，因为表层数据没改变，所以dom不刷新\r\n    // 浅层比较\r\n    return (\r\n        <>\r\n            <h1 ref={props.ref}>我是Apimemo组件</h1>\r\n            <h1>{props.name.id}</h1>\r\n\r\n        </>\r\n    )\r\n}\r\n// function areEqual(prevProps, nextProps) {\r\n//     /*\r\n//     如果把 nextProps 传入 render 方法的返回结果与\r\n//     将 prevProps 传入 render 方法的返回结果一致则返回 true，\r\n//     否则返回 false\r\n//     */\r\n// }\r\n\r\n\r\nconst Fors = React.forwardRef((props, ref) => {\r\n    console.log(props);\r\n    return (\r\n        <>\r\n            <h1 ref={ref}>我是Apimemo组件</h1>\r\n            <h1>{props.name.id}</h1>\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nconst Apimemo = React.memo(Fors)\r\n\r\nexport default Api","D:\\learn\\learn\\react-learn\\src\\Hook.js",["73","74","75","76","77","78","79"],"D:\\learn\\learn\\react-learn\\src\\Hook2.js",["80"],"/*\r\n * @Author: your name\r\n * @Date: 2020-12-28 16:11:03\r\n * @LastEditTime: 2020-12-28 18:03:26\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\learn\\react-learn\\src\\Hook2.js\r\n */\r\nimport React, {useImperativeHandle, useRef,useEffect, useState, useCallback, useMemo } from 'react'\r\n\r\n// 函数式组件在每次渲染的时候都会重新加载一遍 ，整个函数，\r\n// 所以aa会一直被打印，每次都会生成一个新的aa函数；\r\n// 为了解决函数被重复生成；useCallback\r\n// useCallback返回一个函数\r\nlet set = new Set()\r\nlet call = new Set()\r\nfunction Callback() {\r\n    const [count, setCount] = useState(0)\r\n    function aa() {\r\n        console.log('aa');\r\n    }\r\n    console.log(aa);\r\n\r\n    const callback = useCallback(() => {\r\n        console.log('callback');\r\n    }, [])\r\n    set.add(aa)//每渲染一次就增加一个新的\r\n    call.add(callback)//始终只有一个\r\n    return (\r\n        <>\r\n            <p>{count}</p>\r\n            <h1>{set.size}</h1>\r\n            <h1>{call.size}</h1>\r\n            <button onClick={() => {\r\n                setCount(count + 1)\r\n            }}>++++</button>\r\n            <button onClick={callback}>callback</button>\r\n        </>\r\n    )\r\n}\r\n\r\nlet mm = new Set()\r\n// useMemo\r\nfunction Memo() {\r\n\r\n    const [count, setCount] = useState(1);\r\n    const [val, setValue] = useState('');\r\n\r\n    function expensive() {\r\n        // 无论是修改count还是val，由于组件的重新渲染，\r\n        // 都会触发expensive的执行;造成性能浪费；\r\n        console.log('compute');\r\n        let sum = 0;\r\n        for (let i = 0; i < count * 100; i++) {\r\n            sum += i;\r\n        }\r\n        return sum;\r\n    }\r\n    // 通过useMemo ，不让特定值没发生变化时expensive重复执行\r\n    // useMemo返回一个值\r\n    const exp = useMemo(() => {\r\n        console.log('useMemo');\r\n        let sum = 0;\r\n        for (let i = 0; i < count * 100; i++) {\r\n            sum += i;\r\n        }\r\n        return sum;\r\n    }, [count])\r\n    mm.add(expensive)\r\n    return <div>\r\n        <h1>{mm.size}</h1>\r\n        <h4>{count}-{val}-{expensive()}--{exp}</h4>\r\n        <div>\r\n            <button onClick={() => setCount(count + 1)}>+c1</button>\r\n            <input value={val} onChange={event => setValue(event.target.value)} />\r\n        </div>\r\n    </div>;\r\n}\r\n\r\n\r\n// useImperativeHandle \r\n// \r\nconst FancyInput = React.forwardRef((props, ref) => {\r\n    const [ fresh, setFresh ] = useState(false)\r\n    const attRef = useRef(0);//ref可以当变量使用,改变不会重新渲染\r\n    useImperativeHandle(ref, () => ({\r\n      attRef,\r\n      fresh\r\n    }), [ fresh ]);\r\n  \r\n    const handleClick = useCallback(() => {\r\n      attRef.current++;\r\n      console.log(attRef);\r\n    }, [attRef]);\r\n  \r\n    return (\r\n      <div>\r\n        {attRef.current}\r\n        <button onClick={handleClick}>Fancy+</button>\r\n        <button onClick={() => setFresh(!fresh)}>刷新</button>\r\n      </div>\r\n    )\r\n  });\r\n  \r\n  const App = props => {\r\n    const fancyInputRef = useRef();\r\n  \r\n    return (\r\n      <div>\r\n        <FancyInput ref={fancyInputRef} />\r\n        <button\r\n          onClick={() => console.log(fancyInputRef.current)}\r\n        >父组件访问子组件的实例属性</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\nfunction All() {\r\n    return <>\r\n        <Callback></Callback>\r\n        <Memo></Memo>\r\n        \r\n        <App></App>\r\n    </>\r\n}\r\n\r\nexport default All",{"ruleId":"81","severity":1,"message":"82","line":4,"column":10,"nodeType":"83","messageId":"84","endLine":4,"endColumn":23},{"ruleId":"81","severity":1,"message":"85","line":4,"column":25,"nodeType":"83","messageId":"84","endLine":4,"endColumn":29},{"ruleId":"81","severity":1,"message":"86","line":4,"column":31,"nodeType":"83","messageId":"84","endLine":4,"endColumn":36},{"ruleId":"81","severity":1,"message":"87","line":3,"column":17,"nodeType":"83","messageId":"84","endLine":3,"endColumn":26},{"ruleId":"81","severity":1,"message":"88","line":4,"column":61,"nodeType":"83","messageId":"84","endLine":4,"endColumn":71},{"ruleId":"81","severity":1,"message":"89","line":13,"column":7,"nodeType":"83","messageId":"84","endLine":13,"endColumn":12},{"ruleId":"90","severity":1,"message":"91","line":76,"column":17,"nodeType":"92","messageId":"93","endLine":76,"endColumn":19},{"ruleId":"90","severity":1,"message":"91","line":78,"column":24,"nodeType":"92","messageId":"93","endLine":78,"endColumn":26},{"ruleId":"81","severity":1,"message":"94","line":95,"column":10,"nodeType":"83","messageId":"84","endLine":95,"endColumn":16},{"ruleId":"81","severity":1,"message":"95","line":66,"column":10,"nodeType":"83","messageId":"84","endLine":66,"endColumn":17},{"ruleId":"81","severity":1,"message":"96","line":219,"column":10,"nodeType":"83","messageId":"84","endLine":219,"endColumn":19},{"ruleId":"81","severity":1,"message":"97","line":221,"column":24,"nodeType":"83","messageId":"84","endLine":221,"endColumn":33},{"ruleId":"81","severity":1,"message":"98","line":221,"column":35,"nodeType":"83","messageId":"84","endLine":221,"endColumn":40},{"ruleId":"81","severity":1,"message":"99","line":221,"column":42,"nodeType":"83","messageId":"84","endLine":221,"endColumn":52},{"ruleId":"81","severity":1,"message":"100","line":225,"column":9,"nodeType":"83","messageId":"84","endLine":225,"endColumn":14},{"ruleId":"81","severity":1,"message":"101","line":245,"column":11,"nodeType":"83","messageId":"84","endLine":245,"endColumn":19},{"ruleId":"81","severity":1,"message":"102","line":9,"column":44,"nodeType":"83","messageId":"84","endLine":9,"endColumn":53},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Route' is defined but never used.","'Component' is defined but never used.","'HashRouter' is defined but never used.","'Login' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Mymemo' is defined but never used.","'Counter' is defined but never used.","'LoginPage' is defined but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'isLoggedIn' is assigned a value but never used.","'login' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'useEffect' is defined but never used."]