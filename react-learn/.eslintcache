[{"D:\\learn\\react-learn\\src\\index.js":"1","D:\\learn\\react-learn\\src\\Login.js":"2","D:\\learn\\react-learn\\src\\App.js":"3","D:\\learn\\react-learn\\src\\routers\\A.js":"4","D:\\learn\\react-learn\\src\\redux\\reducers\\index.js":"5","D:\\learn\\react-learn\\src\\redux\\reducers\\todos.js":"6","D:\\learn\\react-learn\\src\\Routers.js":"7"},{"size":1050,"mtime":1617243191762,"results":"8","hashOfConfig":"9"},{"size":118,"mtime":1617243191761,"results":"10","hashOfConfig":"9"},{"size":9077,"mtime":1617243191760,"results":"11","hashOfConfig":"9"},{"size":81,"mtime":1617243191782,"results":"12","hashOfConfig":"9"},{"size":617,"mtime":1617243191782,"results":"13","hashOfConfig":"9"},{"size":761,"mtime":1617243191782,"results":"14","hashOfConfig":"9"},{"size":2318,"mtime":1623395111116,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1mx6612",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\learn\\react-learn\\src\\index.js",[],["32","33"],"D:\\learn\\react-learn\\src\\Login.js",[],"D:\\learn\\react-learn\\src\\App.js",["34","35","36"],"import React, { Component } from 'react'\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { BrowserRouter, Link, Route } from 'react-router-dom'\r\n// 懒加载组件\r\nconst OtherComponent = React.lazy(() => import('./Login'));\r\n// React.lazy 目前只支持默认导出（export default）\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    console.log(props);\r\n    this.state = {\r\n      name: 'xiaozhang',\r\n      date: new Date(),\r\n      user: false,\r\n      list: [1, 2, 3]\r\n    }\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n  changeName = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      name: '小张'\r\n    })\r\n  }\r\n  handleClick = (e) => {\r\n    e.preventDefault();\r\n    console.log('阻止默认事件');\r\n    console.log(e);\r\n  }\r\n  changeUser = () => {\r\n    this.setState({\r\n      user: !this.state.user\r\n    }, () => {\r\n      console.log(this.state.user);\r\n    })\r\n  }\r\n  // 生命周期开始：\r\n\r\n  componentDidMount() {\r\n    /**\r\n     * 1：UI渲染完成后调用\r\n     * 2：只执行一次\r\n     * 3：典型场景：获取外部资源\r\n     */\r\n\r\n    // dom第一次加载成功\r\n    console.log(arguments, 'componentDidMount');\r\n\r\n    this.timerID = setTimeout(\r\n      () => this.tick(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  // 组件更新数据或Dom：\r\n\r\n  // componentWillReceiveProps(nextProps) {\r\n  //   // 数据更新    与getDerivedStateFromProps只能存在一个\r\n  //   console.log(arguments, 'componentWillReceiveProps');\r\n  // }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param {*} nextProps 父组件新传入的 props \r\n   * @param {*} nextState 组件更新之后的state\r\n   * @param {*} prevState 组件更新之前的state\r\n   * \r\n   */\r\n\r\n\r\n  static getDerivedStateFromProps(nextProps, nextState) {\r\n    /**\r\n     * 1：当state需要从props初始化时，使用\r\n     * 2：尽量不使用，维护俩者状态需要消耗额外资源，增加复杂度\r\n     * 3：每次state数据更新后render之前都会调用\r\n     * 4：典型场景表单获取默认值\r\n     * \r\n     * 5： 与componentWillReceiveProps 只能存在一个\r\n     *  \r\n     */\r\n\r\n    // state数据更新后  静态无法访问this\r\n    console.log(arguments, 'getDerivedStateFromProps');\r\n    const { type } = nextProps;\r\n    // 当传入的type发生变化的时候，更新state\r\n    if (type !== nextState.type) {\r\n      return {\r\n        type,\r\n      };\r\n    }\r\n    // 否则，对于state不进行任何操作\r\n    return null;\r\n    // 要有返回值\r\n  }\r\n\r\n\r\n  shouldComponentUpdate(nextProps, prevtState) {\r\n    /**\r\n     * 1：觉得Vistual Dom是否重绘\r\n     * 2：一般可以由PuerComponent自动实现\r\n     * 3：典型场景：性能优化\r\n     */\r\n\r\n    console.log(arguments, 'shouldComponentUpdate');\r\n\r\n    // 唯一用于控制组件重新渲染的生命周期，由于在react中，setState以后，state发生变化，\r\n\r\n    // 组件会进入重新渲染的流程，在这里return false可以阻止组件的更新\r\n    return true//必须 return 值\r\n  }\r\n\r\n\r\n  getSnapshotBeforeUpdate(nextProps, prevState) {\r\n    /**\r\n     * 1：在render之后调用，state已更新\r\n     * 2：典型场景：获取render之前的dom状态\r\n     * 3：此生命周期返回的任何值都将作为参数传递给 componentDidUpdate（）\r\n     * 4： 与componentWillUpdate只能存在一个\r\n     */\r\n\r\n\r\n    console.log(arguments, 'getSnapshotBeforeUpdate');\r\n    return true//必须 return 值\r\n\r\n  }\r\n  // componentWillUpdate (nextProps, prevState) {// 与getSnapshotBeforeUpdate只能存在一个\r\n\r\n  // }\r\n\r\n  /**\r\n   * @param {*} perScrollHeight    getSnapshotBeforeUpdate中的返回值\r\n   */\r\n  componentDidUpdate(nextProps, nextState, perScrollHeight) {\r\n    /**\r\n     * 1：每次UI更新被调用\r\n     * 2：典型场景：页面通过props重新获取数据\r\n     */\r\n\r\n    console.log(arguments, 'componentDidUpdate');\r\n    //dom和refs 更新成功\r\n  }\r\n  // 组件更新数据或Dom结束\r\n\r\n\r\n\r\n  componentWillUnmount() {\r\n    /**\r\n     * 1：组件被移除时调用\r\n     * 2：典型场景：资源释放\r\n     */\r\n    // 卸载页面\r\n    console.log(arguments, 'componentWillUnmount');\r\n  }\r\n\r\n  // 生命周期结束\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div>{this.state.date.toLocaleTimeString()}</div>\r\n        <a href=\"/#\" onClick={this.handleClick}>阻止默认事件</a>\r\n        {\r\n          this.state.user ?\r\n            <UserOne changeUser={this.changeUser}></UserOne>\r\n            :\r\n            <UserTwo changeUser={this.changeUser}></UserTwo>\r\n        }\r\n\r\n        <ul>\r\n          {\r\n            this.state.list.map((item, index) => {\r\n              // 使用数据中的 id 来作为元素的 key\r\n              // 当元素没有确定 id 的时候，万不得已你可以使用元素索引 index 作为 key\r\n              return <li key={index}>{item}</li>\r\n            })}\r\n        </ul>\r\n\r\n        {/* 懒加载组件：即React.lazy加载的组件只能在<React.Suspense>组件下使用 */}\r\n        {/* fallback 属性接受任何在组件加载过程中你想展示的 React 元素。\r\n          你可以将 Suspense 组件置于懒加载组件之上的任何位置。\r\n          你甚至可以用一个 Suspense 组件包裹多个懒加载组件 */}\r\n       {this.state.user && <React.Suspense fallback={<div>loading...</div>}>\r\n          <OtherComponent />\r\n        </React.Suspense>}\r\n\r\n\r\n        <NameForm ></NameForm>\r\n\r\n\r\n        <WelcomeDialog></WelcomeDialog>\r\n\r\n        <App1 name={this.state.name} changeName={this.changeName} key='1'>\r\n\r\n\r\n        </App1>\r\n\r\n      \r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nfunction App1(props) {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <p\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          onClick={($event) => {\r\n            props.changeName($event)\r\n          }}\r\n        >\r\n          Learn React {props.name}\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction UserOne(props) {\r\n  return (\r\n    <div onClick={props.changeUser}>UserOne</div>\r\n  )\r\n}\r\nfunction UserTwo(props) {\r\n  return (\r\n    <div onClick={props.changeUser}>UserTwo</div>\r\n  )\r\n}\r\n\r\nclass NameForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      selected: '',\r\n      textName: ''\r\n    }\r\n  }\r\n  handleChange = (event) => {\r\n    console.log(event);\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.name === 'name' ? target.value : target.value;\r\n\r\n\r\n\r\n    this.setState({\r\n      // es6语法   [xxx]: 1; ==> xxx的值: 1;   xxx为变量名\r\n      // 等同于 es5\r\n      // var partialState = {};\r\n      // partialState[name] = value;\r\n      // this.setState(partialState);\r\n\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    console.log(event);\r\n    alert('提交的名字: ' + this.state.textName);\r\n    event.preventDefault();\r\n  }\r\n  render() {\r\n    return (\r\n      <form action=\"\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"name\"> 名字：</label>\r\n        {/* value 设置默认值；数据单项绑定 */}\r\n        <input name='textName' type=\"text\" value={this.state.textName} onChange={this.handleChange} />\r\n        <label>\r\n          选择你喜欢的风味:\r\n          {/* 通过value确定选中的值；而不是selected；\r\n            multiple多选\r\n            value对应值为数组['a','c']\r\n          */}\r\n          <select name='selected' value={this.state.selected} onChange={this.handleChange}>\r\n            <option value=\"grapefruit\">葡萄柚</option>\r\n            <option value=\"lime\">酸橙</option>\r\n            <option value=\"coconut\">椰子</option>\r\n            <option value=\"mango\">芒果</option>\r\n          </select>\r\n        </label>\r\n\r\n\r\n\r\n        <input type=\"submit\" value=\"提交\" />\r\n\r\n\r\n\r\n      </form>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction FancyBorder(props) {\r\n  console.log(props);\r\n  return (\r\n    <div className={'FancyBorder FancyBorder-' + props.color}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n//插槽\r\nfunction FancyBorder2(props) {\r\n  console.log(props);\r\n  return (\r\n    <>\r\n      {/* <> </> 占位符 */}\r\n      <div className={'FancyBorder FancyBorder-' + props.color}>\r\n        <h1>left{props.left}</h1>\r\n        <h1>right{props.right}</h1>\r\n      </div>\r\n      <p></p>\r\n    </>\r\n  );\r\n}\r\n//插槽\r\n\r\nfunction WelcomeDialog() {\r\n  return (\r\n    <div>\r\n      <FancyBorder color=\"blue\">\r\n        <h1 className=\"Dialog-title\">\r\n          Welcome\r\n            </h1>\r\n        <p className=\"Dialog-message\">\r\n          Thank you for visiting our spacecraft!\r\n            </p>\r\n      </FancyBorder>\r\n      <FancyBorder2 left={<UserOne />} right={<UserTwo />} ></FancyBorder2>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","D:\\learn\\react-learn\\src\\routers\\A.js",[],"D:\\learn\\react-learn\\src\\redux\\reducers\\index.js",[],"D:\\learn\\react-learn\\src\\redux\\reducers\\todos.js",[],"D:\\learn\\react-learn\\src\\Routers.js",["37","38","39"],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":4,"column":10,"nodeType":"46","messageId":"47","endLine":4,"endColumn":23},{"ruleId":"44","severity":1,"message":"48","line":4,"column":25,"nodeType":"46","messageId":"47","endLine":4,"endColumn":29},{"ruleId":"44","severity":1,"message":"49","line":4,"column":31,"nodeType":"46","messageId":"47","endLine":4,"endColumn":36},{"ruleId":"44","severity":1,"message":"50","line":3,"column":17,"nodeType":"46","messageId":"47","endLine":3,"endColumn":26},{"ruleId":"44","severity":1,"message":"51","line":4,"column":61,"nodeType":"46","messageId":"47","endLine":4,"endColumn":71},{"ruleId":"44","severity":1,"message":"52","line":13,"column":7,"nodeType":"46","messageId":"47","endLine":13,"endColumn":12},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Route' is defined but never used.","'Component' is defined but never used.","'HashRouter' is defined but never used.","'Login' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]