[{"D:\\learn\\learn\\react-learn\\src\\App.js":"1","D:\\learn\\learn\\react-learn\\src\\reportWebVitals.js":"2","D:\\learn\\learn\\react-learn\\src\\login.js":"3"},{"size":8150,"mtime":1608112858576,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1607926586128,"results":"6","hashOfConfig":"5"},{"size":73,"mtime":1608112591495,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1ag4uxw",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\learn\\learn\\react-learn\\src\\App.js",["15","16","17"],"import React,{ Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Link, Route } from 'react-router-dom'\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      name: 'xiaozhang',\n      date: new Date(),\n      user: true,\n      list: [1, 2, 3]\n    }\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  changeName = (e) => {\n    console.log(e);\n    this.setState({\n      name: '小张'\n    })\n  }\n  handleClick = (e) => {\n    e.preventDefault();\n    console.log('阻止默认事件');\n    console.log(e);\n  }\n  changeUser = () => {\n    this.setState({\n      user: !this.state.user\n    }, () => {\n      console.log(this.state.user);\n    })\n  }\n  // 生命周期开始：\n\n  componentDidMount() {\n    /**\n     * 1：UI渲染完成后调用\n     * 2：只执行一次\n     * 3：典型场景：获取外部资源\n     */\n\n    // dom第一次加载成功\n    console.log(arguments, 'componentDidMount');\n\n    this.timerID = setTimeout(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  // 组件更新数据或Dom：\n\n  // componentWillReceiveProps(nextProps) {\n  //   // 数据更新    与getDerivedStateFromProps只能存在一个\n  //   console.log(arguments, 'componentWillReceiveProps');\n  // }\n\n\n  /**\n   * \n   * @param {*} nextProps 父组件新传入的 props \n   * @param {*} nextState 组件更新之后的state\n   * @param {*} prevState 组件更新之前的state\n   * \n   */\n\n\n  static getDerivedStateFromProps(nextProps, nextState) {\n    /**\n     * 1：当state需要从props初始化时，使用\n     * 2：尽量不使用，维护俩者状态需要消耗额外资源，增加复杂度\n     * 3：每次state数据更新后render之前都会调用\n     * 4：典型场景表单获取默认值\n     * \n     * 5： 与componentWillReceiveProps 只能存在一个\n     *  \n     */\n\n    // state数据更新后  静态无法访问this\n    console.log(arguments, 'getDerivedStateFromProps');\n    const { type } = nextProps;\n    // 当传入的type发生变化的时候，更新state\n    if (type !== nextState.type) {\n      return {\n        type,\n      };\n    }\n    // 否则，对于state不进行任何操作\n    return null;\n    // 要有返回值\n  }\n\n\n  shouldComponentUpdate(nextProps, prevtState) {\n    /**\n     * 1：觉得Vistual Dom是否重绘\n     * 2：一般可以由PuerComponent自动实现\n     * 3：典型场景：性能优化\n     */\n\n    console.log(arguments, 'shouldComponentUpdate');\n\n    // 唯一用于控制组件重新渲染的生命周期，由于在react中，setState以后，state发生变化，\n\n    // 组件会进入重新渲染的流程，在这里return false可以阻止组件的更新\n    return true//必须 return 值\n  }\n\n\n  getSnapshotBeforeUpdate(nextProps, prevState) {\n    /**\n     * 1：在render之后调用，state已更新\n     * 2：典型场景：获取render之前的dom状态\n     * 3：此生命周期返回的任何值都将作为参数传递给 componentDidUpdate（）\n     * 4： 与componentWillUpdate只能存在一个\n     */\n\n\n    console.log(arguments, 'getSnapshotBeforeUpdate');\n    return true//必须 return 值\n\n  }\n  // componentWillUpdate (nextProps, prevState) {// 与getSnapshotBeforeUpdate只能存在一个\n\n  // }\n\n  /**\n   * @param {*} perScrollHeight    getSnapshotBeforeUpdate中的返回值\n   */\n  componentDidUpdate(nextProps, nextState, perScrollHeight) {\n    /**\n     * 1：每次UI更新被调用\n     * 2：典型场景：页面通过props重新获取数据\n     */\n\n    console.log(arguments, 'componentDidUpdate');\n    //dom和refs 更新成功\n  }\n  // 组件更新数据或Dom结束\n\n\n\n  componentWillUnmount() {\n    /**\n     * 1：组件被移除时调用\n     * 2：典型场景：资源释放\n     */\n    // 卸载页面\n    console.log(arguments, 'componentWillUnmount');\n  }\n\n  // 生命周期结束\n  render() {\n\n    return (\n      <div>\n        <div>{this.state.date.toLocaleTimeString()}</div>\n        <a href=\"/#\" onClick={this.handleClick}>阻止默认事件</a>\n        {\n          this.state.user ?\n            <UserOne changeUser={this.changeUser}></UserOne>\n            :\n            <UserTwo changeUser={this.changeUser}></UserTwo>\n        }\n\n        <ul>\n          {\n            this.state.list.map((item, index) => {\n              // 使用数据中的 id 来作为元素的 key\n              // 当元素没有确定 id 的时候，万不得已你可以使用元素索引 index 作为 key\n              return <li key={index}>{item}</li>\n            })}\n        </ul>\n        <NameForm ></NameForm>\n\n\n        <WelcomeDialog></WelcomeDialog>\n      \n        <App1 fallback={<h1>loading....</h1>} name={this.state.name} changeName={this.changeName} key='1'>\n\n\n        </App1>\n        {/* <OtherComponent></OtherComponent> */}\n\n      </div>\n\n    )\n  }\n}\n// const OtherComponent = React.lazy(() => import('./Login'));\n\nfunction App1(props) {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <p\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          onClick={($event) => {\n            props.changeName($event)\n          }}\n        >\n          Learn React {props.name}\n        </p>\n      </header>\n    </div>\n  );\n}\n\nfunction UserOne(props) {\n  return (\n    <div onClick={props.changeUser}>UserOne</div>\n  )\n}\nfunction UserTwo(props) {\n  return (\n    <div onClick={props.changeUser}>UserTwo</div>\n  )\n}\n\nclass NameForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selected: '',\n      textName: ''\n    }\n  }\n  handleChange = (event) => {\n    console.log(event);\n    const target = event.target;\n    const name = target.name;\n    const value = target.name === 'name' ? target.value : target.value;\n\n\n\n    this.setState({\n      // es6语法   [xxx]: 1; ==> xxx的值: 1;   xxx为变量名\n      // 等同于 es5\n      // var partialState = {};\n      // partialState[name] = value;\n      // this.setState(partialState);\n      [name]: value\n    });\n  }\n\n  handleSubmit = (event) => {\n    console.log(event);\n    alert('提交的名字: ' + this.state.value);\n    event.preventDefault();\n  }\n  render() {\n    return (\n      <form action=\"\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"name\"> 名字：</label>\n        {/* value 设置默认值；数据单项绑定 */}\n        <input name='textName' type=\"text\" value={this.state.textName} onChange={this.handleChange} />\n        <label>\n          选择你喜欢的风味:\n          {/* 通过value确定选中的值；而不是selected；\n            multiple多选\n            value对应值为数组['a','c']\n          */}\n          <select name='selected' value={this.state.selected} onChange={this.handleChange}>\n            <option value=\"grapefruit\">葡萄柚</option>\n            <option value=\"lime\">酸橙</option>\n            <option value=\"coconut\">椰子</option>\n            <option value=\"mango\">芒果</option>\n          </select>\n        </label>\n\n\n\n        <input type=\"submit\" value=\"提交\" />\n\n\n\n      </form>\n\n\n    )\n  }\n}\n\n\n\nfunction FancyBorder(props) {\n  console.log(props);\n  return (\n    <div className={'FancyBorder FancyBorder-' + props.color}>\n      {props.children}\n    </div>\n  );\n}\nfunction FancyBorder2(props) {\n  console.log(props);\n  return (\n  <>\n  {/* <> </> 占位符 */}\n    <div className={'FancyBorder FancyBorder-' + props.color}>\n      <h1>left{props.left}</h1>\n      <h1>right{props.right}</h1>\n    </div>\n    <p></p>\n  </>\n  );\n}\n//插槽\nfunction WelcomeDialog() {\n  return (\n      <div>\n    <FancyBorder color=\"blue\">\n        <h1 className=\"Dialog-title\">\n          Welcome\n            </h1>\n        <p className=\"Dialog-message\">\n          Thank you for visiting our spacecraft!\n            </p>\n      </FancyBorder>\n      <FancyBorder2 left={<UserOne/>} right={<UserTwo/>} ></FancyBorder2>\n      </div>\n  );\n}\n\n\n\n\nexport default App;\n","D:\\learn\\learn\\react-learn\\src\\reportWebVitals.js",[],"D:\\learn\\learn\\react-learn\\src\\login.js",[],{"ruleId":"18","severity":1,"message":"19","line":4,"column":10,"nodeType":"20","messageId":"21","endLine":4,"endColumn":23},{"ruleId":"18","severity":1,"message":"22","line":4,"column":25,"nodeType":"20","messageId":"21","endLine":4,"endColumn":29},{"ruleId":"18","severity":1,"message":"23","line":4,"column":31,"nodeType":"20","messageId":"21","endLine":4,"endColumn":36},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Route' is defined but never used."]